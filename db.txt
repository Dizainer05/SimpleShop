CREATE DATABASE IF NOT EXISTS shop;
USE shop;

-- Таблица цветов
CREATE TABLE IF NOT EXISTS colors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE
);

-- Таблица категорий
CREATE TABLE IF NOT EXISTS categories (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE
);

-- Таблица товаров
CREATE TABLE IF NOT EXISTS products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    description TEXT NOT NULL,
    image_path VARCHAR(255), -- Путь к изображению
    color_id INT,
    category_id INT,
    FOREIGN KEY (color_id) REFERENCES colors(id),
    FOREIGN KEY (category_id) REFERENCES categories(id)
);

-- Тестовые данные для цветов
INSERT INTO colors (name) VALUES
('Черный'),
('Белый'),
('Красный'),
('Синий');

-- Тестовые данные для категорий
INSERT INTO categories (name) VALUES
('Электроника'),
('Компьютерная периферия'),
('Аксессуары');

-- Тестовые данные для товаров
SET @color_black = (SELECT id FROM colors WHERE name = 'Черный');
SET @color_white = (SELECT id FROM colors WHERE name = 'Белый');
SET @color_red = (SELECT id FROM colors WHERE name = 'Красный');
SET @color_blue = (SELECT id FROM colors WHERE name = 'Синий');

SET @category_electronics = (SELECT id FROM categories WHERE name = 'Электроника');
SET @category_peripherals = (SELECT id FROM categories WHERE name = 'Компьютерная периферия');

INSERT INTO products (name, price, description, image_path, color_id, category_id) VALUES
('Ноутбук HP', 50000, 'Мощный ноутбук для работы и игр', 'images/laptop_hp.jpg', @color_black, @category_electronics),
('Смартфон Samsung', 30000, 'Новый флагман с отличной камерой', 'images/samsung_phone.jpg', @color_white, @category_electronics),
('Клавиатура Logitech', 4000, 'Механическая клавиатура для геймеров', 'images/logitech_keyboard.jpg', @color_red, @category_peripherals),
('Мышь Razer', 5000, 'Игровая мышь с RGB-подсветкой', 'images/razer_mouse.jpg', @color_blue, @category_peripherals);

-- Хранимые процедуры
DELIMITER //
CREATE PROCEDURE GetProducts(IN sort_column VARCHAR(50), IN sort_order VARCHAR(4))
BEGIN
    SET @query = CONCAT(
        'SELECT p.id, p.name, p.price, p.description, p.image_path, c.name as color, cat.name as category ',
        'FROM products p ',
        'LEFT JOIN colors c ON p.color_id = c.id ',
        'LEFT JOIN categories cat ON p.category_id = cat.id ',
        'ORDER BY ', sort_column, ' ', sort_order
    );
    PREPARE stmt FROM @query;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE AddProduct(
    IN p_name VARCHAR(255), 
    IN p_price DECIMAL(10,2), 
    IN p_description TEXT,
    IN p_image_path VARCHAR(255),
    IN p_color_id INT,
    IN p_category_id INT
)
BEGIN
    INSERT INTO products (name, price, description, image_path, color_id, category_id) 
    VALUES (p_name, p_price, p_description, p_image_path, p_color_id, p_category_id);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE UpdateProduct(
    IN p_id INT, 
    IN p_name VARCHAR(255), 
    IN p_price DECIMAL(10,2), 
    IN p_description TEXT,
    IN p_image_path VARCHAR(255),
    IN p_color_id INT,
    IN p_category_id INT
)
BEGIN
    UPDATE products 
    SET name = p_name, 
        price = p_price, 
        description = p_description,
        image_path = p_image_path,
        color_id = p_color_id,
        category_id = p_category_id
    WHERE id = p_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE DeleteProduct(IN p_id INT)
BEGIN
    DELETE FROM products WHERE id = p_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE FilterProducts(IN p_color VARCHAR(255), IN p_category VARCHAR(255))
BEGIN
    SELECT p.id, p.name, p.price, p.description, p.image_path, c.name as color, cat.name as category 
    FROM products p
    LEFT JOIN colors c ON p.color_id = c.id
    LEFT JOIN categories cat ON p.category_id = cat.id
    WHERE (p_color = '' OR c.name = p_color)
      AND (p_category = '' OR cat.name = p_category);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE SearchProducts(IN query TEXT)
BEGIN
    SET @query = CONCAT('%', query, '%');
    SELECT p.id, p.name, p.price, p.description, p.image_path, c.name as color, cat.name as category
    FROM products p
    LEFT JOIN colors c ON p.color_id = c.id
    LEFT JOIN categories cat ON p.category_id = cat.id
    WHERE p.name LIKE @query 
       OR p.price LIKE @query 
       OR p.description LIKE @query 
       OR c.name LIKE @query 
       OR cat.name LIKE @query;
END //
DELIMITER ;

// новые процедурки для отчета

DELIMITER //
CREATE PROCEDURE GetCategorySummary()
BEGIN
    SELECT 
        COALESCE(cat.name, 'Без категории') AS category,
        SUM(p.price) AS total_price,
        COUNT(p.id) AS product_count
    FROM products p
    LEFT JOIN categories cat ON p.category_id = cat.id
    GROUP BY cat.name;
END //

CREATE PROCEDURE GetColorSummary()
BEGIN
    SELECT 
        COALESCE(c.name, 'Без цвета') AS color,
        COUNT(p.id) AS product_count,
        SUM(p.price) AS total_value
    FROM products p
    LEFT JOIN colors c ON p.color_id = c.id
    GROUP BY c.name;
END //

CREATE PROCEDURE GetProductPrices()
BEGIN
    SELECT 
        name,
        price,
        (SELECT name FROM categories WHERE id = p.category_id) AS category,
        (SELECT name FROM colors WHERE id = p.color_id) AS color
    FROM products p
    ORDER BY name;
END //
DELIMITER ;